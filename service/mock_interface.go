// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	model "github.com/Gofr-VMS/model"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetAllService mocks base method.
func (m *MockService) GetAllService(ctx *gofr.Context) ([]*model.Vehicles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllService", ctx)
	ret0, _ := ret[0].([]*model.Vehicles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllService indicates an expected call of GetAllService.
func (mr *MockServiceMockRecorder) GetAllService(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllService", reflect.TypeOf((*MockService)(nil).GetAllService), ctx)
}

// GetByIdService mocks base method.
func (m *MockService) GetByIdService(ctx *gofr.Context, id int) (*model.Vehicles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIdService", ctx, id)
	ret0, _ := ret[0].(*model.Vehicles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIdService indicates an expected call of GetByIdService.
func (mr *MockServiceMockRecorder) GetByIdService(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIdService", reflect.TypeOf((*MockService)(nil).GetByIdService), ctx, id)
}

// InsertService mocks base method.
func (m *MockService) InsertService(ctx *gofr.Context, vh *model.Vehicles) (*model.Vehicles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertService", ctx, vh)
	ret0, _ := ret[0].(*model.Vehicles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertService indicates an expected call of InsertService.
func (mr *MockServiceMockRecorder) InsertService(ctx, vh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertService", reflect.TypeOf((*MockService)(nil).InsertService), ctx, vh)
}

// RemoveService mocks base method.
func (m *MockService) RemoveService(ctx *gofr.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveService", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveService indicates an expected call of RemoveService.
func (mr *MockServiceMockRecorder) RemoveService(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveService", reflect.TypeOf((*MockService)(nil).RemoveService), ctx, id)
}

// UpdateService mocks base method.
func (m *MockService) UpdateService(ctx *gofr.Context, v *model.Vehicles) (*model.Vehicles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateService", ctx, v)
	ret0, _ := ret[0].(*model.Vehicles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateService indicates an expected call of UpdateService.
func (mr *MockServiceMockRecorder) UpdateService(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockService)(nil).UpdateService), ctx, v)
}
