// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SN786/gofr_vms/internal/service (interfaces: VehicleManager)

// Package service is a generated GoMock package.
package service

import (
	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	model "github.com/SN786/gofr_vms/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockVehicleManager is a mock of VehicleManager interface
type MockVehicleManager struct {
	ctrl     *gomock.Controller
	recorder *MockVehicleManagerMockRecorder
}

// MockVehicleManagerMockRecorder is the mock recorder for MockVehicleManager
type MockVehicleManagerMockRecorder struct {
	mock *MockVehicleManager
}

// NewMockVehicleManager creates a new mock instance
func NewMockVehicleManager(ctrl *gomock.Controller) *MockVehicleManager {
	mock := &MockVehicleManager{ctrl: ctrl}
	mock.recorder = &MockVehicleManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVehicleManager) EXPECT() *MockVehicleManagerMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockVehicleManager) Delete(arg0 *gofr.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockVehicleManagerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVehicleManager)(nil).Delete), arg0, arg1)
}

// Get mocks base method
func (m *MockVehicleManager) Get(arg0 *gofr.Context, arg1 int) (*model.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*model.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockVehicleManagerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVehicleManager)(nil).Get), arg0, arg1)
}

// GetAll mocks base method
func (m *MockVehicleManager) GetAll(arg0 *gofr.Context) ([]*model.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]*model.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockVehicleManagerMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockVehicleManager)(nil).GetAll), arg0)
}

// Post mocks base method
func (m *MockVehicleManager) Post(arg0 *gofr.Context, arg1 *model.Vehicle) (*model.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", arg0, arg1)
	ret0, _ := ret[0].(*model.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post
func (mr *MockVehicleManagerMockRecorder) Post(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockVehicleManager)(nil).Post), arg0, arg1)
}

// Update mocks base method
func (m *MockVehicleManager) Update(arg0 *gofr.Context, arg1 int, arg2 *model.Vehicle) (*model.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockVehicleManagerMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVehicleManager)(nil).Update), arg0, arg1, arg2)
}
