// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SN786/gofr_vms/internal/store (interfaces: VehicleManager)

// Package store is a generated GoMock package.
package store

import (
	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	model "github.com/SN786/gofr_vms/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockVehicleManager is a mock of VehicleManager interface
type MockVehicleManager struct {
	ctrl     *gomock.Controller
	recorder *MockVehicleManagerMockRecorder
}

// MockVehicleManagerMockRecorder is the mock recorder for MockVehicleManager
type MockVehicleManagerMockRecorder struct {
	mock *MockVehicleManager
}

// NewMockVehicleManager creates a new mock instance
func NewMockVehicleManager(ctrl *gomock.Controller) *MockVehicleManager {
	mock := &MockVehicleManager{ctrl: ctrl}
	mock.recorder = &MockVehicleManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVehicleManager) EXPECT() *MockVehicleManagerMockRecorder {
	return m.recorder
}

// DeleteVehicleByID mocks base method
func (m *MockVehicleManager) DeleteVehicleByID(arg0 *gofr.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVehicleByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVehicleByID indicates an expected call of DeleteVehicleByID
func (mr *MockVehicleManagerMockRecorder) DeleteVehicleByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVehicleByID", reflect.TypeOf((*MockVehicleManager)(nil).DeleteVehicleByID), arg0, arg1)
}

// GetAll mocks base method
func (m *MockVehicleManager) GetAll(arg0 *gofr.Context) ([]*model.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]*model.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockVehicleManagerMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockVehicleManager)(nil).GetAll), arg0)
}

// GetDetailsByID mocks base method
func (m *MockVehicleManager) GetDetailsByID(arg0 *gofr.Context, arg1 int) (*model.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailsByID", arg0, arg1)
	ret0, _ := ret[0].(*model.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailsByID indicates an expected call of GetDetailsByID
func (mr *MockVehicleManagerMockRecorder) GetDetailsByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailsByID", reflect.TypeOf((*MockVehicleManager)(nil).GetDetailsByID), arg0, arg1)
}

// InsertVehicle mocks base method
func (m *MockVehicleManager) InsertVehicle(arg0 *gofr.Context, arg1 *model.Vehicle) (*model.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertVehicle", arg0, arg1)
	ret0, _ := ret[0].(*model.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertVehicle indicates an expected call of InsertVehicle
func (mr *MockVehicleManagerMockRecorder) InsertVehicle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertVehicle", reflect.TypeOf((*MockVehicleManager)(nil).InsertVehicle), arg0, arg1)
}

// UpdateVehicleByID mocks base method
func (m *MockVehicleManager) UpdateVehicleByID(arg0 *gofr.Context, arg1 *model.Vehicle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVehicleByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVehicleByID indicates an expected call of UpdateVehicleByID
func (mr *MockVehicleManagerMockRecorder) UpdateVehicleByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVehicleByID", reflect.TypeOf((*MockVehicleManager)(nil).UpdateVehicleByID), arg0, arg1)
}
